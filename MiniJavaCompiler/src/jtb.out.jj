//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
import syntaxtree.*;
import java.util.Vector;


public class MiniJavaParser 
{
   public static void main(String args[]) throws ParseException
   {
      try
      {
         MiniJavaParser parser = new MiniJavaParser(System.in);
         parser.program();
         System.out.println("Success.");
      }
      catch (Exception e)
      {
         System.out.println("Error.");
         System.out.println(e.getMessage());
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniJavaParser)

SKIP :
{
   " "
   | "\r"
   | "\t"
   | "\n"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <PLUS: "+">
   | <MINUS: "-">
   | <MULTIPLY: "*">
   | <DIVIDE: "/">
   | <SMALLER: "<">
   | <AND: "&&">
   | <ASSIGNMENT: "=">
   | <EXCL: "!">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <LBRACK: "[">
   | <RBRACK: "]">
   | <SEMICOLON: ";">
   | <COMMA: ",">
   | <DOT: ".">
}

TOKEN :
{
   <RETURN: "return">
   | <STATIC: "static">
   | <WHILE: "while">
   | <VOID: "void">
   | <FOR: "for">
   | <INT: "int">
   | <BOOL: "boolean">
   | <IF: "if">
   | <ELSE: "else">
   | <ENDOFFILE: "EOF">
   | <FALSE: "false">
   | <TRUE: "true">
}

TOKEN :
{
   <CLASS: "class">
   | <PUBLIC: "public">
   | <MAIN: "main">
   | <STRING: "String">
   | <EXTENDS: "extends">
   | <PRINT: "System.out.println">
   | <LENGTH: "length">
   | <THIS: "this">
   | <NEW: "new">
}

TOKEN :
{
   <#DIGIT: ["0"-"9"]>
   | <#LETTER: ["A"-"Z"] | ["a"-"z"]>
   | <NUM: (<DIGIT>)+>
   | <ID: (<LETTER> | ["_"]) (<LETTER> | <DIGIT> | ["_"])*>
}

program program() :
{
   mainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   classDecl n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=mainClass()
   (
      n2=classDecl()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   n4=<EOF> { 
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
   }
   
   { return new program(n0,n1,n3); }
}

mainClass mainClass() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   statement n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ID> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<LBRACE> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<PUBLIC> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<STATIC> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<VOID> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<MAIN> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<LPAREN> { n14 = JTBToolkit.makeNodeToken(n15); }
   n17=<STRING> { n16 = JTBToolkit.makeNodeToken(n17); }
   n19=<LBRACK> { n18 = JTBToolkit.makeNodeToken(n19); }
   n21=<RBRACK> { n20 = JTBToolkit.makeNodeToken(n21); }
   n23=<ID> { n22 = JTBToolkit.makeNodeToken(n23); }
   n25=<RPAREN> { n24 = JTBToolkit.makeNodeToken(n25); }
   n27=<LBRACE> { n26 = JTBToolkit.makeNodeToken(n27); }
   n28=statement()
   n30=<RBRACE> { n29 = JTBToolkit.makeNodeToken(n30); }
   n32=<RBRACE> { n31 = JTBToolkit.makeNodeToken(n32); }
   
   { return new mainClass(n0,n2,n4,n6,n8,n10,n12,n14,n16,n18,n20,n22,n24,n26,n28,n29,n31); }
}

classDecl classDecl() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   varDecl n13;
   NodeListOptional n14 = new NodeListOptional();
   methodDecl n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ID> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7=<EXTENDS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<ID> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n11=<LBRACE> { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      n13=varDecl()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   (
      n15=methodDecl()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17=<RBRACE> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new classDecl(n0,n2,n4,n10,n12,n14,n16); }
}

varDecl varDecl() :
{
   type n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=type()
   n2=<ID> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SEMICOLON> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new varDecl(n0,n1,n3); }
}

methodDecl methodDecl() :
{
   NodeToken n0;
   Token n1;
   type n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   formalList n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeListOptional n13 = new NodeListOptional();
   varDecl n14;
   NodeListOptional n15 = new NodeListOptional();
   statement n16;
   NodeToken n17;
   Token n18;
   exp n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;

   
}
{
   n1=<PUBLIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=type()
   n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<LPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=formalList()
      { n7.addNode(n8); }
   )?
   n10=<RPAREN> { n9 = JTBToolkit.makeNodeToken(n10); }
   n12=<LBRACE> { n11 = JTBToolkit.makeNodeToken(n12); }
   (
      LOOKAHEAD(2)
      n14=varDecl()
      { n13.addNode(n14); }
   )*
   { n13.nodes.trimToSize(); }
   (
      n16=statement()
      { n15.addNode(n16); }
   )*
   { n15.nodes.trimToSize(); }
   n18=<RETURN> { n17 = JTBToolkit.makeNodeToken(n18); }
   n19=exp()
   n21=<SEMICOLON> { n20 = JTBToolkit.makeNodeToken(n21); }
   n23=<RBRACE> { n22 = JTBToolkit.makeNodeToken(n23); }
   
   { return new methodDecl(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n20,n22); }
}

formalList formalList() :
{
   type n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   formalRest n4;

   
}
{
   n0=type()
   n2=<ID> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=formalRest()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new formalList(n0,n1,n3); }
}

formalRest formalRest() :
{
   NodeToken n0;
   Token n1;
   type n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<COMMA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=type()
   n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new formalRest(n0,n2,n3); }
}

type type() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(4); }
      n3=<INT> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<LBRACK> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7=<RBRACK> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n9=<BOOL> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n0 = new NodeChoice(n8, 1); }
   |
      n11=<INT> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 2); }
   |
      n13=<ID> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 3); }
   )
   
   { return new type(n0); }
}

statement statement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   statement n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   exp n13;
   NodeToken n14;
   Token n15;
   statement n16;
   NodeToken n17;
   Token n18;
   statement n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   exp n25;
   NodeToken n26;
   Token n27;
   statement n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   exp n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   exp n44;
   NodeToken n45;
   Token n46;
   NodeSequence n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   exp n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   exp n57;
   NodeToken n58;
   Token n59;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<LBRACE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n5=statement()
         { n4.addNode(n5); }
      )*
      { n4.nodes.trimToSize(); }
      { n1.addNode(n4); }
      n7=<RBRACE> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(7); }
      n10=<IF> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n12=<LPAREN> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n8.addNode(n11); }
      n13=exp()
      { n8.addNode(n13); }
      n15=<RPAREN> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n8.addNode(n14); }
      n16=statement()
      { n8.addNode(n16); }
      n18=<ELSE> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n8.addNode(n17); }
      n19=statement()
      { n8.addNode(n19); }
      { n0 = new NodeChoice(n8, 1); }
   |
      { n20 = new NodeSequence(5); }
      n22=<WHILE> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      n24=<LPAREN> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n20.addNode(n23); }
      n25=exp()
      { n20.addNode(n25); }
      n27=<RPAREN> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n20.addNode(n26); }
      n28=statement()
      { n20.addNode(n28); }
      { n0 = new NodeChoice(n20, 2); }
   |
      { n29 = new NodeSequence(5); }
      n31=<PRINT> { n30 = JTBToolkit.makeNodeToken(n31); }
      { n29.addNode(n30); }
      n33=<LPAREN> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n29.addNode(n32); }
      n34=exp()
      { n29.addNode(n34); }
      n36=<RPAREN> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n29.addNode(n35); }
      n38=<SEMICOLON> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n29.addNode(n37); }
      { n0 = new NodeChoice(n29, 3); }
   |
      LOOKAHEAD(2)
      { n39 = new NodeSequence(5); }
      n41=<ID> { n40 = JTBToolkit.makeNodeToken(n41); }
      { n39.addNode(n40); }
      n43=<ASSIGNMENT> { n42 = JTBToolkit.makeNodeToken(n43); }
      { n39.addNode(n42); }
      n44=exp()
      { n39.addNode(n44); }
      n46=<SEMICOLON> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n39.addNode(n45); }
      { n0 = new NodeChoice(n39, 4); }
   |
      { n47 = new NodeSequence(7); }
      n49=<ID> { n48 = JTBToolkit.makeNodeToken(n49); }
      { n47.addNode(n48); }
      n51=<LBRACK> { n50 = JTBToolkit.makeNodeToken(n51); }
      { n47.addNode(n50); }
      n52=exp()
      { n47.addNode(n52); }
      n54=<RBRACK> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n47.addNode(n53); }
      n56=<ASSIGNMENT> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n47.addNode(n55); }
      n57=exp()
      { n47.addNode(n57); }
      n59=<SEMICOLON> { n58 = JTBToolkit.makeNodeToken(n59); }
      { n47.addNode(n58); }
      { n0 = new NodeChoice(n47, 5); }
   )
   
   { return new statement(n0); }
}

exp exp() :
{
   expAux n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeSequence n3;
   op n4;
   exp n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   exp n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeOptional n23;
   expList n24;
   NodeToken n25;
   Token n26;

   
}
{
   n0=expAux()
   (
      { n23 = new NodeOptional(); }
      (
         { n3 = new NodeSequence(2); }
         n4=op()
         { n3.addNode(n4); }
         n5=exp()
         { n3.addNode(n5); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n6 = new NodeSequence(3); }
         n8=<LBRACK> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=exp()
         { n6.addNode(n9); }
         n11=<RBRACK> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n6.addNode(n10); }
         { n2 = new NodeChoice(n6, 1); }
      |
         { n12 = new NodeSequence(2); }
         n14=<DOT> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
         (
            (
               n17=<LENGTH> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15 = new NodeChoice(n16, 0); }
            |
               { n18 = new NodeSequence(4); }
               n20=<ID> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
               n22=<LPAREN> { n21 = JTBToolkit.makeNodeToken(n22); }
               { n18.addNode(n21); }
               (
                  n24=expList()
                  { n23.addNode(n24); }
               )?
               { n18.addNode(n23); }
               n26=<RPAREN> { n25 = JTBToolkit.makeNodeToken(n26); }
               { n18.addNode(n25); }
               { n15 = new NodeChoice(n18, 1); }
            )
            
         )
         { n12.addNode(n15); }
         { n2 = new NodeChoice(n12, 2); }
      )
      { n1.addNode(n2); }
   )?
   
   { return new exp(n0,n1); }
}

expAux expAux() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   exp n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   exp n33;
   NodeToken n34;
   Token n35;
   NodeSequence n36;
   NodeToken n37;
   Token n38;
   exp n39;

   
}
{
   (
      n2=<FALSE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<TRUE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<ID> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<THIS> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<NUM> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      LOOKAHEAD(2)
      { n11 = new NodeSequence(5); }
      n13=<NEW> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n15=<ID> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n11.addNode(n14); }
      n17=<LPAREN> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n11.addNode(n16); }
      n19=<RPAREN> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n11.addNode(n18); }
      { n0 = new NodeChoice(n11, 5); }
   |
      { n20 = new NodeSequence(5); }
      n22=<NEW> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      n24=<INT> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n20.addNode(n23); }
      n26=<LBRACK> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n20.addNode(n25); }
      n27=exp()
      { n20.addNode(n27); }
      n29=<RBRACK> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n20.addNode(n28); }
      { n0 = new NodeChoice(n20, 6); }
   |
      { n30 = new NodeSequence(3); }
      n32=<LPAREN> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n30.addNode(n31); }
      n33=exp()
      { n30.addNode(n33); }
      n35=<RPAREN> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n30.addNode(n34); }
      { n0 = new NodeChoice(n30, 7); }
   |
      { n36 = new NodeSequence(2); }
      n38=<EXCL> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n36.addNode(n37); }
      n39=exp()
      { n36.addNode(n39); }
      { n0 = new NodeChoice(n36, 8); }
   )
   
   { return new expAux(n0); }
}

expList expList() :
{
   exp n0;
   NodeListOptional n1 = new NodeListOptional();
   expRest n2;

   
}
{
   n0=exp()
   (
      n2=expRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new expList(n0,n1); }
}

expRest expRest() :
{
   NodeToken n0;
   Token n1;
   exp n2;

   
}
{
   n1=<COMMA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=exp()
   
   { return new expRest(n0,n2); }
}

op op() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<AND> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<SMALLER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<PLUS> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<MINUS> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<MULTIPLY> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new op(n0); }
}
